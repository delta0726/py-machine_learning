# ***************************************************************************************
# Title     : Pythonによる因果分析（因果推論・因果探索の実践入門）
# Chapter   : 第4章 因果推論を実装しよう
# Theme     : 1 回帰分析による因果推論の実装（データ作成）
# Created on: 2021/12/03
# Page      : P76 - P78
# ***************************************************************************************


# ＜概要＞
# - 乱数を用いて回帰分析用の仮想データを作成する
#   --- ｢性別｣と｢cm視聴の有無｣から｢購買の有無｣と｢購入金額｣を記録したもの


# ＜目次＞
# 0 準備
# 1 特徴量の作成
# 2 ラベルの作成
# 3 購入量の算出


# 0 準備 ---------------------------------------------------------------------------

# ライブラリ
import random

import numpy as np

import pandas as pd
from numpy.random import randn, randint
from scipy.special import expit


# 乱数のシードを設定
np.random.seed(1234)
random.seed(1234)


# 1 特徴量の作成 ---------------------------------------------------------------------

# ＜ポイント＞
# - モデルへの入力変数は観測した全変数を使用するのではなく、バックドアバイアスを閉じるように選定する
#   --- 具体的には因果ダイアグラムをd分離した後に残っている変数のみを使用する
#   --- ここではP75の因果ダイアグラムに基づく


# データ数
num_data = 200

# 年齢
# --- 15から75歳の一様乱数
x_1 = randint(15, 76, num_data)

# 性別（0を女性、1を男性とします）
# --- 0か1の乱数
x_2 = randint(0, 2, num_data)

# 確認
print(x_1)
print(x_2)


# 2 ラベルの作成 -------------------------------------------------------------------

# ＜ポイント＞
# ラベルとなるテレビCMを見たかどうかを1/0で作成する


# ノイズの生成
# --- 標準正規乱数
e_z = randn(num_data)

# シグモイド関数に入れる部分
# --- P76の式
z_base = x_1 + (1 - x_2) * 10 - 40 + 5 * e_z

# シグモイド関数を計算
# --- a = 0.1
z_prob = expit(0.1 * z_base)

# 確認
pd.Series(e_z).describe()
pd.Series(z_base).describe()
pd.Series(z_prob).describe()

# テレビCMを見たかどうかの変数
# ---（0：見ていない、1：見た）
Z = np.array([])

i = 1
for i in range(num_data):
    Z_i = np.random.choice(2, size=1, p=[1-z_prob[i], z_prob[i]])[0]
    Z = np.append(Z, Z_i)

# 確認
print(Z)


# 3 購入量の算出 ---------------------------------------------------------------

# ノイズの生成
e_y = randn(num_data)

# 購入量の算出
# --- Yi = -X1 + 30X2 + 10Zi + 80 + Noise
Y = -x_1 + 30 * x_2 + 10 * Z + 80 + 10 * e_y

# データフレーム格納
df = pd.DataFrame({'年齢': x_1,
                   '性別': x_2,
                   'CMを見た': Z,
                   '購入量': Y,
                   })

# データ確認
df.head()

# データ保存
df.to_csv('csv/tv_cm.csv')
