# ******************************************************************************
# Title       : AI・データサイエンスのための数学プログラミング
# Chapter     : 6 感染症の影響を予測してみよう
# Theme       : 6-1 イメージで理解する感染症モデル
# Creat Date  : 2021/1/10
# Final Update:
# Page        : P255 - P259
# ******************************************************************************


# ＜概要＞
# - 最も単純な微分方程式の1つである｢ねずみ算｣について理解を深める
#   --- 何の制限もない状態で噂が広がっていく様子のシミュレーションなどに用いらえれる


# ＜目次＞
# 0 準備
# 1 ねずみ算のシミュレーション
# 2 ねずみ算のアニメーション


# 0 準備 ---------------------------------------------------------------------

# ライブラリ
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation, rc


# 1 ねずみ算のシミュレーション --------------------------------------------------

# ＜ポイント＞
# - ねずみ算を時間発展方程式でforループを用いて表現する
# - 単純な指数関数のグラフが作成される


# パラメータ設定
# --- 期間変化量
# --- 微分係数
# --- シミュレーション回数
dt = 1.0
a = 1.0
num = 10

# 初期化
# --- 配列生成
# --- 初期値設定
n = np.zeros(num)
n[0] = 2.0

# 時間発展方程式
# --- 変化量： 微分係数(a) * 直前の値(n[t - 1])
# --- 次の値： 期間変化量(delta * dt) + 直前の値(n[t - 1])
t = 1
for t in range(1, num):
    delta = a * n[t - 1]
    n[t] = delta * dt + n[t - 1]

# グラフ描画
plt.plot(n)
plt.show()


# 2 ねずみ算のアニメーション -------------------------------------------------

# ＜ポイント＞
# - 数値シミュレーションとしての見せ方も工夫する
#   --- 散布図のプロットをねずみ算方式で増やしていく
#   --- ループごとに作成したプロットを順番に見せることでアニメーションを作成


# パラメータ設定
# --- 期間変化量
# --- 微分係数
# --- シミュレーション回数
# --- 乱数に対する掛け目（X軸）
# --- 乱数に対する掛け目（Y軸）
dt = 1.0
a = 1.0
num = 10
x_size = 8.0
y_size = 6.0

# 初期化
# --- 配列生成
# --- 初期値設定
n = np.zeros(num)
n[0] = 2
list_plot = []

# プロット準備
fig = plt.figure()

# 時間発展方程式
# --- ねずみ算で得た値の数だけXYの乱数を生成する
# --- 散布図を生成することで値の増加に応じてプロットが増えていく
# --- プロットオブジェクトを順次リストに格納
t = 1
for t in range(1, num):
    delta = a * n[t - 1]
    n[t] = delta * dt + n[t - 1]
    x_n = np.random.rand(int(n[t])) * x_size
    y_n = np.random.rand(int(n[t])) * y_size
    img = plt.scatter(x_n, y_n, color="black")
    list_plot.append([img])

# アニメーションオブジェクトの作成
# --- 注意：Jupyter NotebookにようなHTML出力機能が必要
plt.grid()
anim = animation.ArtistAnimation(fig, list_plot, interval=200, repeat_delay=1000)
rc('animation', html='jshtml')
plt.close()
anim
