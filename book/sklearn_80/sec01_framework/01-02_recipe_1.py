# ******************************************************************************
# Chapter   : 1 機械学習の枠組みを理解する
# Title     : Numpyの基礎(Recipe1)
# Created by: Owner
# Created on: 2020/12/20
# Page      : P2 - P10
# ******************************************************************************

# ＜概要＞
# - Scikit-Learnは2次元のNumpy配列からなる入力テーブルでデータをインプットする
#   --- Numpy配列の操作に馴れておく必要がある
#   --- 数値の2次元配列を作ってScikit-Learnにインプットする


# ＜目次＞
# 0 準備
# 1 Numpy配列の形状と次元数
# 2 Numpyのブロードキャスト
# 3 Numpyの初期化とdtype


# 0 準備 -------------------------------------------------------------------------------------------

# ライブラリ
import numpy as np


# 1 Numpy配列の形状と次元数 ----------------------------------------------------------------------------

# 整数の配列生成
array_1 = np.arange(10)
array_1

# 形状確認
# --- タプルの長さは10
# --- 次元数は1
array_1.shape

# 次元数
array_1.ndim

# 形状の変更
# --- リストのリスト(二重の入れ子リスト)
array_1 = array_1.reshape([5, 2])
array_1


# 2 Numpyのブロードキャスト ---------------------------------------------------------------------------

# ＜ポイント＞
# - ブロードキャストとは配列をストレッチすることを意味する


# 準備
array_1 = np.arange(10).reshape([5, 2])
array_1

# 配列の加算
# --- スカラーの1を5*2の配列にストレッチしている
# --- ブロードキャスト
array_1 + 1


# 例1：配列要素の乗算
array_2 = np.arange(10)
array_2
array_2 * array_2


# 例2：配列要素の加算
array_2 = array_2 ** 2
array_2 = array_2.reshape((5, 2))
array_2

array_1 = array_1 + 1
array_1
array_1

array_1 + array_2


# 3 Numpyの初期化とdtype ------------------------------------------------------------------------------

# ＜ポイント＞
# - 様々な初期値を使ってNumpy配列のメモリを確保する場合は以下のメソッドを使う
#   --- np.zeros / np.ones / np.empty

# ゼロ配列
np.zeros((5, 2))

# One配列
np.ones((5, 2), dtype=np.int)

# 空の配列
# --- dtypeの配列に対してメモリは確保するが、要素を特定の値で初期化しない
np.empty((5, 2), dtype=np.float)


# 4 インデックス ----------------------------------------------------------------------------------------

# ＜ポイント＞
# - 配列の要素はインデックスで取得する


# 準備
array_1 = np.arange(10) + 1
array_1 = array_1.reshape([5, 2])
array_1

# 要素抽出
array_1[0, 0]

# 1行目の表示
array_1[0, :]

# 1列目の表示
array_1[:, 0]

# 3行目から5行目まで表示
array_1[2:5, :]

# 1列目の3行目から5行目まで表示
array_1[2:5, 0]


# 5 ブーリアン配列 ------------------------------------------------------------------------------------

# ＜ポイント＞
# - Numpyはインデックスをブール値で処理している

# 準備
array_1 = np.arange(10) + 1
array_1 = array_1.reshape([5, 2])
array_1

# 要素ごとの理論演算
array_1 > 5

# 理論演算を用いたフィルタリング
array_1[array_1 > 5]


# 6 算術演算 ------------------------------------------------------------------------------------

# 準備
array_1 = np.arange(10) + 1
array_1 = array_1.reshape([5, 2])
array_1

# 配列の全要素合計
array_1.sum()

# 行ごとに合計
array_1.sum(axis=1)

# 列ごとに合計
array_1.sum(axis=0)


# 7 NaN値 -------------------------------------------------------------------------------------

# ＜ポイント＞
# - Scikit-Learnはnp.nanを受け付けない

# NaNを含む配列
array_3 = np.array([np.nan, 0, 1, 2, np.nan])
array_3

# NaNの判定
np.isnan(array_3)

# NaNの除外
array_3[~np.isnan(array_3)]

# NaNの置換
array_3[np.isnan(array_3)] = 0
array_3
